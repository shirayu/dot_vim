
"For golang

autocmd myvimrc BufNewFile,BufRead *.go setlocal filetype=go
autocmd myvimrc FileType go setlocal tabstop=4 noexpandtab softtabstop=0

call dein#add('https://github.com/fatih/vim-go', {
      \ 'lazy' : 1,
      \ 'autoload': {
      \   'filetypes': 'go',
      \ }})
let g:go_bin_path = expand('~/.go/bin')
let g:go_play_open_browser = 0
let g:go_fmt_fail_silently = 1
let g:go_fmt_autosave = 1
let g:go_fmt_command = 'goimports'
let g:go_disable_autoinstall = 1

au myvimrc FileType go nmap <Leader>i <Plug>(go-info)
au myvimrc FileType go nmap <Leader>gd <Plug>(go-doc)
au myvimrc FileType go nmap <Leader>gv <Plug>(go-doc-vertical)
au myvimrc FileType go nmap <leader>gb <Plug>(go-build)
au myvimrc FileType go nmap <leader>gt <Plug>(go-test)
au myvimrc FileType go nmap gd <Plug>(go-def)
au myvimrc FileType go nmap <Leader>ds <Plug>(go-def-split)
au myvimrc FileType go nmap <Leader>dv <Plug>(go-def-vertical)
au myvimrc FileType go nmap <Leader>dt <Plug>(go-def-tab)
au myvimrc FileType go nmap <Leader>gl :GoLint<CR>

let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_structs = 1
let g:go_highlight_interfaces = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1


if executable('gopls')
  au myvimrc User lsp_setup call lsp#register_server({
              \ 'name': 'gopls',
              \ 'cmd': {server_info->['gopls', '-mode', 'stdio']},
              \ 'whitelist': ['go'],
              \ })
  autocmd myvimrc BufWritePre *.go LspDocumentFormatSync
elseif executable('go-langserver')
  augroup LspGo
    au!
    autocmd User lsp_setup call lsp#register_server({
        \ 'name': 'go-lang',
        \ 'cmd': {server_info->['go-langserver', '-mode', 'stdio', '-gocodecompletion']},
        \ 'whitelist': ['go'],
        \ })
    autocmd FileType go setlocal omnifunc=lsp#complete
  augroup END
endif


"For neocomplete
if !exists('g:neocomplete#sources#omni#input_patterns')
    let g:neocomplete#sources#omni#input_patterns = {}
endif
let g:neocomplete#sources#omni#input_patterns.go = '[^.[:digit:] *\t]\.\w*'
"let g:neocomplete#sources#omni#input_patterns.go = '\h\w\.\w*'

if !exists('g:neocomplcache_omni_patterns')
    let g:neocomplcache_omni_patterns = {}
endif
let g:neocomplcache_omni_patterns.go = '\h\w*\.\?'


autocmd myvimrc FileType go :highlight goErr cterm=bold ctermfg=214
autocmd myvimrc FileType go :match goErr /\<err\>/
